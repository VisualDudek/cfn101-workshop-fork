AWSTemplateFormatVersion: '2010-09-09'
# This CloudFormation template creates a Lambda function that logs the current time to CloudWatch Logs
# at a regular interval using a CloudWatch Events rule.

# The IAM role that the Lambda function assumes to execute its code.
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      # The CloudWatchLogsPolicy grants the necessary permissions for the Lambda function to log to CloudWatch Logs.
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # The Lambda function that logs the current time to CloudWatch Logs.
  TimeLoggingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Runtime: python3.8
      Code:
        ZipFile: |
          import json
          import datetime
          import boto3

          def handler(event, context):
              current_time = datetime.datetime.now().isoformat()
              print(f"Current time is: {current_time}")
              return {
                  'statusCode': 200,
                  'body': json.dumps(f'Hello from Lambda! Current time is: {current_time}')
              }

  # This CloudWatch Events rule is set up to trigger at a regular interval.
  PeriodicEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger TimeLoggingLambda every 5 minutes"
      # The 'rate' schedule expression specifies the interval at which the rule triggers.
      # In this case, it's set to trigger every X minutes.
      ScheduleExpression: 'rate(5 minutes)'
      State: 'ENABLED'
      # The Targets property specifies the AWS resources that this rule targets.
      # In this case, it's targeting our Lambda function.
      Targets:
        - Arn: !GetAtt [TimeLoggingLambda, Arn]
          Id: "TimeLoggingLambdaTarget"

  # This resource grants the necessary permissions for the CloudWatch Events service 
  # to invoke our Lambda function.
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [TimeLoggingLambda, Arn]
      # Specifies the action that CloudWatch Events is allowed to perform. 
      # In this case, it's allowed to invoke the Lambda function.
      Action: 'lambda:InvokeFunction'
      # Specifies the AWS service that's allowed to perform the specified action. 
      # In this case, it's the CloudWatch Events service.
      Principal: 'events.amazonaws.com'
      # Associates this permission with our CloudWatch Events rule.
      SourceArn: !GetAtt [PeriodicEventRule, Arn]
